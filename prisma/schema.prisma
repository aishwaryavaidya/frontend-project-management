generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model Account {
//   id                String  @id @default(uuid()) @map("_id") // Use UUID for unique IDs in MySQL
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?
//   access_token      String?
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(uuid()) @map("_id") // Use UUID for unique IDs in MySQL
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// enum UserRole {
//   USER
//   ADMIN
//   SERVICE_PROVIDER
// }

// model User {
//   id            String    @id @default(uuid()) @map("_id") // Use UUID for unique IDs in MySQL
//   name          String
//   firstName     String
//   lastName      String
//   phone         String
//   email         String    @unique
//   emailVerified DateTime?
//   image         String?
//   role          UserRole  @default(USER)
//   password      String?
//   status        Boolean   @default(true)
//   accounts      Account[]
//   sessions      Session[]
//   isVerified    Boolean   @default(false)
//   token         Int?
//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @updatedAt
// }

// model Category {
//   id          String  @id @default(uuid()) @map("_id") // Use UUID for unique IDs in MySQL
//   title       String
//   slug        String  @unique
//   imageUrl    String?
//   description String?

//   createdAt DateTime  @default(now())
//   updatedAt DateTime? @updatedAt
// }

enum Role {
  ADMIN
  USER
  PROGRAM_MANAGER
  PROJECT_MANAGER
  SUPER_USER
}

model User {
  id            String    @id @default(uuid())
  firstName     String
  lastName      String
  email         String    @unique
  password      String
  phone         String?
  employeeId    String    @unique
  role          Role      @default(USER)
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id])
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//supersonic
model Phase {
  id         Int         @id @default(autoincrement())
  name       String
  milestones Milestone[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Milestone {
  id          Int       @id @default(autoincrement())
  index       Int
  name        String
  startDate   DateTime
  endDate     DateTime
  actualStart DateTime?
  actualEnd   DateTime?
  progress    Float     @default(0)
  clientSpoc  String
  apSpoc      String
  raidNotes   String?
  phaseId     Int
  phase       Phase     @relation(fields: [phaseId], references: [id])
  tasks       Task[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isExpanded  Boolean?
}

model Task {
  id             Int          @id @default(autoincrement())
  index          String // Format: "1.1", "1.2", etc.
  name           String
  startDate      DateTime
  endDate        DateTime
  actualStart    DateTime?
  actualEnd      DateTime?
  progress       Float        @default(0)
  clientSpoc     String
  apSpoc         String
  milestoneId    Int
  milestone      Milestone    @relation(fields: [milestoneId], references: [id])
  assignments    Assignment[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  projectManager String
}

model Employee {
  id          Int          @id @default(autoincrement())
  name        String
  role        String
  assignments Assignment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  percentage  Int
}

model Assignment {
  id           Int      @id @default(autoincrement())
  taskId       Int
  employeeId   Int
  role         String
  duration     Int // Duration in days
  employee     Employee @relation(fields: [employeeId], references: [id])
  task         Task     @relation(fields: [taskId], references: [id])
  employeeName String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

//RAID

model Project {
  id          String     @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  raidItems   RAIDItem[]
}

model RAIDItem {
  id               String    @id @default(uuid())
  projectId        String
  project          Project   @relation(fields: [projectId], references: [id])
  milestoneNo      Int?
  dateRaised       DateTime?
  type             String?
  sprintDate       DateTime?
  category         String?
  probability      Int?
  preventiveAction String?
  status           String?
  impact           String?
  priority         String?
  confirmedBy      String?
  confirmationDate DateTime?
  mitigationPlan   Json?
  owner            String?
  dateClosed       DateTime?
  activitiesLog    Json?
  actionItems      Json?
  assignedTo       String?
  assignedOn       DateTime?
  remarks          Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([projectId])
}
